[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "andamios-orm"
version = "0.1.0"
description = "A modern, async-first Python ORM library built on DuckDB and SQLAlchemy 2.0+"
authors = ["Andamios Team <team@andamios.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/andamios/andamios-orm"
repository = "https://github.com/andamios/andamios-orm"
documentation = "https://docs.andamios.dev/orm"
keywords = ["orm", "async", "duckdb", "sqlalchemy", "database"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]
packages = [{include = "andamios_orm", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core dependencies - latest versions
sqlalchemy = "^2.0.23"
duckdb = "^0.9.0"
uvloop = "^0.19.0"
pydantic = "^2.5.0"
alembic = "^1.13.0"
# Async support
asyncio-mqtt = {version = "^0.16.0", optional = true}
# CLI support
click = "^8.1.7"
rich = "^13.7.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-xdist = "^3.5.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
# Code quality
mypy = "^1.7.0"
ruff = "^0.1.6"
black = "^23.11.0"
isort = "^5.12.0"
pre-commit = "^3.6.0"
# Security
bandit = "^1.7.5"
safety = "^2.3.5"
# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"
# Development tools
ipython = "^8.17.0"
ipdb = "^0.13.13"

[tool.poetry.group.performance.dependencies]
# Performance testing and profiling
pytest-benchmark = "^4.0.0"
memory-profiler = "^0.61.0"
py-spy = "^0.3.14"

[tool.poetry.scripts]
andamios-orm = "andamios_orm.cli:main"

[tool.poetry.extras]
mqtt = ["asyncio-mqtt"]
all = ["asyncio-mqtt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["andamios_orm"]
known_third_party = ["sqlalchemy", "duckdb", "pydantic", "uvloop", "alembic"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll handle this case by case)
    "B904",  # Allow raising exceptions without from cause
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B011", "S101", "ARG001"]  # Allow assert statements in tests

[tool.ruff.mccabe]
max-complexity = 10

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "duckdb.*",
    "factory_boy.*",
    "uvloop.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/andamios_orm",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=100",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests (isolated component testing)",
    "integration: Integration tests (with real database)",
    "e2e: End-to-end tests (complete workflows)",
    "performance: Performance tests (benchmarking)",
    "slow: Slow running tests",
]
asyncio_mode = "auto"
# Parallel execution
# addopts = ["-n", "auto"]  # Uncomment to enable parallel testing by default

# Coverage configuration
[tool.coverage.run]
source = ["src/andamios_orm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/site-packages/*",
]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 100

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

# Pre-commit configuration file reference
# (actual configuration in .pre-commit-config.yaml)
[tool.pre-commit]
# This section is for reference only
# Actual configuration is in .pre-commit-config.yaml